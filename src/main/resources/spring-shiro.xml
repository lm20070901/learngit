<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">
	
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<!-- override these for application-specific URLs if you like:-->
		<property name="loginUrl" value="/login" />
		<!-- <property name="successUrl" value="/index" /> 
		<property name="unauthorizedUrl" value="/unauthorized.jsp" />-->
    <!--The 'filters' property is not necessary since any declared javax.servlet.Filter bean-->
    <!--defined will be automatically acquired and available via its beanName in chain-->
    <!--definitions, but you can perform instance overrides or name aliases here if you like:-->
	
		<!--<property name="filters"> 
				<util:map> 
					<entry key="anAlias"value-ref="someFilter"/>
				</util:map> 
			</property>-->
		<property name="filterChainDefinitions">
			<value>
				/static/** = anon
				/toLogin = anon
				/article/uploadPic = anon
				/article/uploadMedia = anon
				/** = authc
        </value>
		</property>
	</bean>

	<!--Define any javax.servlet.Filter beans you want anywhere in this application context.-->
	<!--They will automatically be acquired by the 'shiroFilter' bean above and made available-->
	<!--to the 'filterChainDefinitions' property. Or you can manually/explicitly add them-->
	<!--to the shiroFilter's 'filters' Map if desired. See its JavaDoc for more details.-->
	
	<!--	<bean id="someFilter" class="..."/>
			 <bean id="anotherFilter" class="..."> </bean>
	-->


	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!--Single realm app. If you have multiple realms, use the 'realms' property instead.-->
		<property name="realm" ref="myRealm" />
		<property name="cacheManager" ref="cacheManager" />
		<!--By default the servlet container sessions will be used. Uncomment
			this line to use shiro's native sessions (see the JavaDoc for more):
		-->
		<!--  <property name="sessionMode" value="native"/> -->
	</bean>


	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManager" ref="ehCacheManager" />
	</bean>

	<bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" />
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!--Define the Shiro Realm implementation you want to use to connect to your back-end-->
	<!-- security datasource: -->
	<bean id="myRealm" class="com.tianwen.dcdp.service.SystemAuthorizingRealm">
	</bean>
	
	
</beans>
  